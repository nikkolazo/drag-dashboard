---
import type { Question } from '../utils/dataLoader';
import { getClassificationInfo } from '../utils/categoryMapper';

interface Props {
  questions: Question[];
  years: string[];
  company: string;
  questionsByYear: Map<string, Map<string, Question>>; // year -> questionId -> Question
}

const { questions, years, company, questionsByYear } = Astro.props;

// Get unique questions
const validQuestions = questions.filter(q => q && q.question_id);
const uniqueQuestions = Array.from(
  new Map(validQuestions.map(q => [q.question_id, q])).values()
).sort((a, b) => a.question_id.localeCompare(b.question_id));

// Calculate trend for each question across years
function getTrend(questionId: string, years: string[]): string {
  const scores: number[] = [];
  for (const year of years) {
    const yearMap = questionsByYear.get(year);
    const question = yearMap?.get(questionId);
    if (question) {
      const info = getClassificationInfo(question.answer.classification);
      scores.push(info.score);
    }
  }

  if (scores.length < 2) return 'â†’';

  const firstScore = scores[0];
  const lastScore = scores[scores.length - 1];

  if (lastScore > firstScore) return 'â†‘';
  if (lastScore < firstScore) return 'â†“';
  return 'â†’';
}
---

<div class="matrix-view">
  <h2 class="text-2xl font-bold text-slate-100 mb-6">ðŸ“Š Matrix View: Questions Ã— Years</h2>

  <div class="overflow-x-auto">
    <table class="w-full border-collapse text-sm">
      <thead>
        <tr class="bg-slate-800 sticky top-0 z-10">
          <th class="text-left p-3 border border-slate-700 text-slate-300 font-semibold min-w-[300px]">
            Question
          </th>
          {years.map(year => (
            <th class="text-center p-3 border border-slate-700 text-slate-300 font-semibold w-24">
              {year}
            </th>
          ))}
          <th class="text-center p-3 border border-slate-700 text-slate-300 font-semibold w-16">
            Trend
          </th>
        </tr>
      </thead>
      <tbody>
        {uniqueQuestions.map((question) => {
          const trend = getTrend(question.question_id, years);
          const trendColors = {
            'â†‘': 'text-emerald-400',
            'â†“': 'text-red-400',
            'â†’': 'text-slate-400'
          };

          return (
            <tr class="hover:bg-slate-800/50 transition-colors">
              <td class="p-3 border border-slate-700 text-slate-300">
                <div class="text-xs text-slate-500 mb-1">{question.question_id}</div>
                <div class="text-sm">{question.question_text}</div>
              </td>
              {years.map(year => {
                const yearMap = questionsByYear.get(year);
                const dragQuestion = yearMap?.get(question.question_id);

                if (!dragQuestion) {
                  return (
                    <td class="p-3 border border-slate-700 bg-slate-800/30">
                      <div class="text-center text-slate-600 text-xs">N/A</div>
                    </td>
                  );
                }

                const classInfo = getClassificationInfo(dragQuestion.answer.classification);

                return (
                  <td
                    class="p-3 border border-slate-700 cursor-pointer hover:opacity-90 transition-opacity matrix-cell"
                    style={`background-color: ${classInfo.bgColor}`}
                    data-question-id={question.question_id}
                    data-year={year}
                  >
                    <div class="text-center">
                      <div
                        class="font-semibold text-xs"
                        style={`color: ${classInfo.color}`}
                      >
                        {dragQuestion.answer.classification}
                      </div>
                    </div>

                    <!-- Tooltip on hover -->
                    <div class="tooltip-wrapper">
                      <div class="tooltip-content hidden bg-slate-900 border border-slate-600 rounded-lg p-3 shadow-xl w-64">
                        <div class="text-xs text-slate-300 mb-2">
                          <strong>{company} {year}</strong>
                        </div>
                        <div class="text-xs text-slate-400 mb-2">
                          {dragQuestion.answer.classification_justification.substring(0, 150)}...
                        </div>
                        {dragQuestion.answer.financial_quantification && dragQuestion.answer.financial_quantification !== 'Not disclosed' && dragQuestion.answer.financial_quantification !== 'Not disclosed by D-Rag' && (
                          <div class="text-xs text-emerald-400 font-semibold mb-2">
                            ðŸ’° {dragQuestion.answer.financial_quantification.substring(0, 100)}
                          </div>
                        )}
                        <div class="text-xs text-slate-500 mt-2 border-t border-slate-700 pt-2 cursor-pointer hover:text-emerald-400">
                          âžœ Click cell for full details
                        </div>
                      </div>
                    </div>
                  </td>
                );
              })}
              <td class="p-3 border border-slate-700 text-center">
                <span class={`text-xl ${trendColors[trend as keyof typeof trendColors]}`}>
                  {trend}
                </span>
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>

  <!-- Legend -->
  <div class="mt-6 flex flex-wrap gap-6 text-sm">
    <div class="flex items-center gap-2">
      <span class="text-slate-400">Classification:</span>
    </div>
    {['YES', 'PARTIAL', 'UNCLEAR', 'NONE'].map(cls => {
      const info = getClassificationInfo(cls);
      return (
        <div class="flex items-center gap-2">
          <div
            class="w-4 h-4 rounded border border-slate-600"
            style={`background-color: ${info.bgColor}`}
          ></div>
          <span class="text-slate-300">{cls}</span>
        </div>
      );
    })}
    <div class="ml-6 flex items-center gap-4">
      <span class="text-slate-400">Trend:</span>
      <span class="text-emerald-400">â†‘ Improving</span>
      <span class="text-slate-400">â†’ Stable</span>
      <span class="text-red-400">â†“ Declining</span>
    </div>
  </div>
</div>

<style>
  .matrix-view table {
    border-spacing: 0;
  }

  .matrix-view td[data-question-id] {
    position: relative;
    z-index: 1;
  }

  /* Ensure hovered cells (and their tooltips) appear above all others */
  .matrix-view td.matrix-cell:hover {
    z-index: 9999 !important;
  }

  .matrix-view tr:hover {
    z-index: 100;
  }

  /* Tooltip for single cells (positioned on top) */
  .tooltip-wrapper {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 8px;
    pointer-events: none;
    z-index: 1000;
  }

  .tooltip-content {
    pointer-events: auto;
    transition: opacity 0.2s ease-in-out;
    z-index: 1001;
  }

  .tooltip-content.show {
    display: block;
    opacity: 1;
  }
</style>

<script>
  // Add hover and click handlers to matrix cells
  document.addEventListener('DOMContentLoaded', () => {
    const cells = document.querySelectorAll('.matrix-cell[data-question-id][data-year]');
    let currentVisibleTooltip = null;
    let hideTimeoutMap = new Map();

    cells.forEach(cell => {
      const tooltip = cell.querySelector('.tooltip-content');
      if (!tooltip) return;

      // Show tooltip on cell hover
      cell.addEventListener('mouseenter', () => {
        // Hide any currently visible tooltip
        if (currentVisibleTooltip && currentVisibleTooltip !== tooltip) {
          currentVisibleTooltip.classList.add('hidden');
          currentVisibleTooltip.classList.remove('show');
        }

        // Clear any pending hide timeout for this tooltip
        const timeoutId = hideTimeoutMap.get(tooltip);
        if (timeoutId) {
          clearTimeout(timeoutId);
          hideTimeoutMap.delete(tooltip);
        }

        tooltip.classList.remove('hidden');
        tooltip.classList.add('show');
        currentVisibleTooltip = tooltip;
      });

      // Hide tooltip with delay when leaving cell
      cell.addEventListener('mouseleave', () => {
        const timeoutId = setTimeout(() => {
          tooltip.classList.add('hidden');
          tooltip.classList.remove('show');
          if (currentVisibleTooltip === tooltip) {
            currentVisibleTooltip = null;
          }
          hideTimeoutMap.delete(tooltip);
        }, 200);
        hideTimeoutMap.set(tooltip, timeoutId);
      });

      // Keep tooltip visible when hovering over it
      const tooltipWrapper = cell.querySelector('.tooltip-wrapper');
      if (tooltipWrapper) {
        tooltipWrapper.addEventListener('mouseenter', () => {
          const timeoutId = hideTimeoutMap.get(tooltip);
          if (timeoutId) {
            clearTimeout(timeoutId);
            hideTimeoutMap.delete(tooltip);
          }
        });

        tooltipWrapper.addEventListener('mouseleave', () => {
          const timeoutId = setTimeout(() => {
            tooltip.classList.add('hidden');
            tooltip.classList.remove('show');
            if (currentVisibleTooltip === tooltip) {
              currentVisibleTooltip = null;
            }
            hideTimeoutMap.delete(tooltip);
          }, 200);
          hideTimeoutMap.set(tooltip, timeoutId);
        });
      }

      // Click handler to navigate to question details
      cell.addEventListener('click', () => {
        const questionId = cell.getAttribute('data-question-id');
        const year = cell.getAttribute('data-year');

        // Check if we're on the year detail page (has question sections)
        const questionElement = document.getElementById(`question-${questionId}`);

        if (questionElement) {
          // We're on the year detail page - scroll to the question
          questionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
          questionElement.classList.add('highlight-flash');
          setTimeout(() => {
            questionElement.classList.remove('highlight-flash');
          }, 2000);
        } else {
          // We're on the overview page - navigate to year detail page with anchor
          const companyMatch = window.location.pathname.match(/\/([^/]+)$/);
          if (companyMatch) {
            const company = companyMatch[1];
            window.location.href = `/${company}/${year}#question-${questionId}`;
          }
        }
      });
    });
  });
</script>
